1.	Explain the differences between primitive and reference data types
primitive data types are the most basic data types in Java, and they are used to represent simple values such as numbers and characters.
One key difference between primitive and reference data types is that primitive data types store the value directly, while reference data types store a reference to the value
2.	Define the scope of a variable (hint: local and global variable)
The scope of a variable refers to the parts of a program where the variable can be accessed or used. There are two main types of variables in Java: local variables and global variables. Local variables are variables that are defined within a method or block of code, and they are only accessible within that method or block. Global variables, on the other hand, are variables that are defined outside of any method or block of code, and they are accessible throughout the entire program.

3.	Why is initialization of variables required
nitialization of variables is required because variables must have a value before they can be used. In Java, variables must be declared with a data type and a name, but they do not have to be initialized
4.	Differentiate between static, instance and local variables. 
Static variables, also known as class variables, are variables that are shared by all instances of a class. They are defined using the static keyword and are typically declared outside of any method or block of code. Static variables are created when the class is loaded, and they are accessible to all instances of the class.

Instance variables, also known as non-static variables, are variables that are associated with a specific instance of a class. They are defined without the static keyword and are typically declared outside of any method or block of code. Instance variables are created when an instance of a class is created, and they are unique to each instance of the class.

Local variables are variables that are defined within a method or block of code, and they are only accessible within that method or block. Local variables are created when the method or block of code is executed, and they are destroyed when the method or block of code completes
5.	Differentiate between widening and narrowing casting in java. 
Widening casting, also known as upcasting, is the process of converting a value from a smaller data type to a larger data type.
Narrowing casting, also known as downcasting, is the process of converting a value from a larger data type to a smaller data type.
7.	Explain the importance of using Java packages 
Java packages are used to organize and structure Java classes and interfaces into logical groups. Packages provide a way to namespace classes and interfaces, which helps to prevent naming conflicts and makes it easier to locate and use specific classes and interfaces in larger projects. Packages also allow you to create reusable libraries of code that can be easily shared and used in other projects

8.	Explain three controls used when creating GUI applications in Java language.
Buttons: buttons are used to allow users to initiate an action or trigger a specific event in the application.

Labels: labels are used to display text or images in the user interface.

Text fields: text fields are used to allow users to input text into the application. 
9.	Explain the difference between containers and components as used in Java
In Java, containers are used to hold and organize other components, such as buttons, labels, and text fields. Containers provide a way to lay out and arrange components within the user interface. Examples of containers in Java include panels, windows, and frames. Components, on the other hand, are the individual elements that are contained within a container.

10.	Write a Java program to reverse an array having five items of type int.

public class Main {
  public static void main(String[] args) {
    // Initialize the array
    int[] array = {1, 2, 3, 4, 5};

    // Reverse the array
    for (int i = 0; i < array.length / 2; i++) {
      int temp = array[i];
      array[i] = array[array.length - i - 1];
      array[array.length - i - 1] = temp;
    }

    // Print the reversed array
    for (int element : array) {
      System.out.print(element + " ");
    }
  }
}
11.	Programs written for a graphical user interface have to deal with “events.” 
Explain what is meant by the term event. 
Give at least two different examples of events, and discuss how a program might
respond to those events.	
An event in a GUI (Graphical User Interface) application is an action or occurrence that triggers a response from the program. Examples of events include user actions such as clicking a button or entering text into a text field, system events such as a window being resized or a timer expiring, and events generated by other components or objects within the application.

Here are two examples of events and how a program might respond to them:

Button click event: when a user clicks a button, an event is generated and the program can respond by executing a specific piece of code or performing a specific action. For example, a program might respond to a button click event by displaying a message or changing the contents of a text field.

Text field focus event: when a user clicks on a text field or tabs into it, an event is generated indicating that the text field has gained focus. The program can respond to this event by selecting all the text in the field, or by displaying a message or hint to the user
12.	Explain the difference between the following terms as used in Java programming. 
Polymorphism and encapsulation
Polymorphism refers to the ability of a program to perform different actions depending on the context or type of object it is working with. Encapsulation refers to the bundling of data and behavior (methods) together in an object, and the hiding of implementation details from the user.

method overloading and method overriding
Method overloading occurs when a class has multiple methods with the same name, but with different parameters. Method overriding occurs when a subclass defines a method with the same signature as a method in the superclass, and the subclass method replaces the behavior of the superclass method.

class and interface
A class is a blueprint for creating objects, and it defines the properties and behavior of the objects it creates. An interface is a collection of abstract methods that define a set of behaviors or capabilities that a class can implement.

inheritance and polymorphism
Inheritance refers to the ability of a class to inherit properties and behavior from a superclass, while polymorphism refers to the ability of a program to perform different actions depending on the context or type of object it is working with.

13.	using examples, explain the two possible ways of implementing polymorphism. Show your code in java.

There are two main ways to implement polymorphism in Java: method overloading and method overriding.
Method overloading:

public class Main {
  // Overloaded method
  public static void print(int value) {
    System.out.println("Printing integer: " + value);
  }

  // Overloaded method
  public static void print(double value) {
    System.out.println("Printing double: " + value);
  }

  public static void main(String[] args) {
    // Call the overloaded method with an int argument
    print(10); // Output: Printing integer: 10

    // Call the overloaded method with a double argument
    print(3.14); // Output: Printing double: 3.14
  }
}

Method override:
public class Main {
  // Base class
  static class Shape {
    public void draw() {
      System.out.println("Drawing shape");
    }
  }

  // Subclass
  static class Circle extends Shape {
    @Override
    public void draw() {
      System.out.println("Drawing


 

